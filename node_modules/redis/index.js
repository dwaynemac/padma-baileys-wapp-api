export function createClient() {
  const data = new Map();
  return {
    async connect() {},
    async keys(pattern) {
      if (pattern === '*') return Array.from(data.keys());
      return [];
    },
    async hExists(key, field) {
      const rec = data.get(key) || {};
      return Object.hasOwn(rec, field);
    },
    async hGet(key, field) {
      const rec = data.get(key) || {};
      return rec[field] ?? null;
    },
    async hSet(key, field, value) {
      const rec = data.get(key) || {};
      rec[field] = value;
      data.set(key, rec);
    },
    async hDel(key, field) {
      const rec = data.get(key) || {};
      delete rec[field];
      data.set(key, rec);
    },
    async del(key) {
      data.delete(key);
    },
    multi() {
      const ops = [];
      return {
        hSet(k, f, v) { ops.push(['hSet', k, f, v]); return this; },
        hDel(k, f) { ops.push(['hDel', k, f]); return this; },
        async exec() {
          for (const op of ops) {
            if (op[0] === 'hSet') {
              const rec = data.get(op[1]) || {};
              rec[op[2]] = op[3];
              data.set(op[1], rec);
            } else if (op[0] === 'hDel') {
              const rec = data.get(op[1]) || {};
              delete rec[op[2]];
              data.set(op[1], rec);
            }
          }
        }
      };
    }
  };
}
